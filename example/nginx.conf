
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  /var/log/nginx/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}

env ARXIGNIS_CAPTCHA_SITE_KEY;
env ARXIGNIS_CAPTCHA_SECRET_KEY;
env ARXIGNIS_API_KEY;
env ARXIGNIS_API_URL;
env ARXIGNIS_MODE;
env ARXIGNIS_CAPTCHA_PROVIDER;
env ARXIGNIS_ACCESS_RULE_ID;
# env ARXIGNIS_API_SSL_VERIFY;

http {
    include       mime.types;
    default_type  application/octet-stream;
    resolver 127.0.0.11 ipv6=off;
    lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
    lua_shared_dict arxignis_cache 200m;
    lua_shared_dict arxignis_queue 50m;
    lua_code_cache off;

    real_ip_header X-Forwarded-For;
    real_ip_recursive on;
    set_real_ip_from 10.0.0.0/8;
    set_real_ip_from 172.16.0.0/12;
    set_real_ip_from 192.168.0.0/16;
    set_real_ip_from 100.64.0.0/10;
    set_real_ip_from 169.254.0.0/16;


    geoip2 /usr/local/share/GeoIP/GeoLite2-Country.mmdb {
        auto_reload 5m;
        $geoip2_metadata_country_build metadata build_epoch;
        $geoip2_data_country_code default=US source=$remote_addr country iso_code;
        $geoip2_data_country_name country names en;
    }

    geoip2 /usr/local/share/GeoIP/GeoLite2-ASN.mmdb {
        auto_reload 5m;
        $geoip2_metadata_asn_build metadata build_epoch;
        $geoip2_data_asn source=$remote_addr autonomous_system_number;
        $geoip2_data_org source=$remote_addr autonomous_system_organization;
    }


    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    init_by_lua_block {
      local mlcache = require "resty.mlcache"
      local arxignis_cache, err = mlcache.new("arxignis_cache", "arxignis_cache", {
        lru_size = 50000,
        ttl = 800,
        neg_ttl = 10,
        ipc_shm = "arxignis_cache"
        })
        if err then
        end

      _G.arxignis_cache = arxignis_cache
    }

    init_worker_by_lua_block {
      local worker = require "resty.arxignis.worker"
      ngx.log(ngx.DEBUG, "Starting flush timers " .. ngx.worker.id())
        worker.start_flush_timers({
            ARXIGNIS_API_URL = os.getenv("ARXIGNIS_API_URL"),
            ARXIGNIS_API_KEY = os.getenv("ARXIGNIS_API_KEY")
        })
    }


    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  _;

        access_by_lua_block {
          local arxignis = require("resty.arxignis")
          -- If GEOIP is not available, pass nil for country and asn
          -- arxignis.remediate(ngx.var.remote_addr, nil, nil)
          -- If GEOIP is available, pass the country and asn
          arxignis.remediate(ngx.var.remote_addr, ngx.var.geoip2_data_country_code, ngx.var.geoip2_data_asn)
        }

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            content_by_lua_block {
              ngx.header.content_type = "text/html"
              ngx.say("Hello, World!")
              ngx.exit(ngx.HTTP_OK)
            }
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
